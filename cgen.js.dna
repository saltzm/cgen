
var assert = function (cond, message) {
    if (!cond) {
        console.warn("ERROR: " + message)
        process.exit(-1)
    }
}

var t = {}
var mt = {}
var struct = {} 
// TODO separate public from private funcs
var func = {}
var constant = {}
var module = {}
var dep = {}
var modules = {}
var main = {}

function jsonEqual(a,b) {
    return JSON.stringify(a) === JSON.stringify(b);
}

// TODO also check no extra fields
assertObjHasRequiredFields = function(obj, obj_type, required_fields) {
    required_fields.forEach(function(field) {
        assert(obj.hasOwnProperty(field), "Cannot define " + obj_type + " " +
            obj.name + " without a '"
            + field + "' field")
    })
}

assertObjIsUnique = function(obj_container, obj_type, obj_name, obj) {
    if (obj_container.hasOwnProperty(obj_name)) {
      assert(jsonEqual(obj, obj_container[obj_name]), 
          "Cannot redefine " + obj_type + " '" + obj_name + "'")
    }
}

defineModule = function(obj) {
    var required_fields = ["name", "executable", "project_deps",
                           "external_deps", "external_libs"]
    assertObjHasRequiredFields(obj, "module", required_fields)
    assertObjIsUnique(modules, "module", obj.name, obj)

    modules[obj.name] = obj
}

defineType = function(obj) {
    var required_fields = ["name", "ctype"]
    assertObjHasRequiredFields(obj, "type", required_fields)

    // The uniqueness check is a little different for types since it's the only
    // thing where the full JSON obj isn't stored as the value in the map
    if (t.hasOwnProperty(obj.name)) {
      assert(obj.ctype == t[obj.name], 
          "Cannot redefine type '" + obj.name + "'")
    }

    t[obj.name] = obj.ctype
}

defineMetatype = function(obj) {
    var required_fields = ["name", "def"]
    assertObjHasRequiredFields(obj, "metatype", required_fields)
    assertObjIsUnique(mt, "metatype", obj.name, obj)

    mt[obj.name] = obj.def
}

defineFunction = function(obj) {
    var required_fields = ["name", "module", "visibility", "inp", "out", "def"]
    assertObjHasRequiredFields(obj, "function", required_fields)
    assertObjIsUnique(func, "function", obj.name, obj)

    func[obj.name] = obj
}

defineStruct = function(obj) {
    var required_fields = ["name", "module", "visibility", "data"]
    assertObjHasRequiredFields(obj, "struct", required_fields)
    assertObjIsUnique(struct, "struct", obj.name, obj)

    struct[obj.name] = obj
}

defineEntryPoint = function(obj) {
    var required_fields = ["name", "module"]
    assertObjHasRequiredFields(obj, "entry point", required_fields)
    assertObjIsUnique(main, "entry point", obj.name, obj)

    main[obj.name] = obj
}

./!include("package.js.dna")

var writeStructToOutput = function(struct_obj) {
.struct 
.@{struct_obj.name} { 
    Object.entries(struct_obj.data).forEach(([field_name, field_type]) => {
        assert(field_type, 
            "Invalid type for field '" + field_name + "' in struct " +
            struct_obj.name)
.    @{field_type} @{field_name};
    })
.};
.
}

var writeFunctionToOutput = function(func_obj, is_header) {
    var params = []
    Object.entries(func_obj.inp).forEach(([arg_name, arg_type]) => {
        params.push(arg_type + " " + arg_name)
    })
    var func_sig = func_obj.name + "(" + params.join(", ") + ")"
    if (func_obj.hasOwnProperty("compiler_directives")) {
        var compiler_directives = func_obj.compiler_directives.join(" ")
.@{compiler_directives}
    }
.@{func_obj.out}
.@{func_sig}
    if (is_header) {
./+;
    } else {
./+ {
.    @{func_obj.def()}
.}
    }
}

var makeHeaderGuard = function(module_name) { 
    return module_name.toUpperCase() + "_H_"
}
var fs = require('fs');

// Create src and build directories if they don't exist
if (!fs.existsSync("src")){
    fs.mkdirSync("src");
}

if (!fs.existsSync("build")){
    fs.mkdirSync("build");
}

Object.entries(modules).forEach(([module_name, props]) => {
    var header_file = "src/" + module_name + ".h"
./!output(header_file)
    var header_guard = makeHeaderGuard(module_name) 
.#ifndef @{header_guard}
.#define @{header_guard}
.
    props.project_deps.forEach(function(other_module) {
.#include "@{other_module}.h"
    })

    var class_file = "src/" + module_name + ".c"
./!output(class_file)
.
.#include "@{module_name}.h"
.
    props.external_deps.forEach(function(other_module) {
.#include "@{other_module}.h"
    })
.
})

Object.entries(struct).forEach(([struct_name, struct_obj]) => {
    var header_file = "src/" + struct_obj.module + ".h"
    var class_file = "src/" + struct_obj.module + ".c"

// Write struct typedef to header
./!append(header_file)
.
    if (struct_obj.visibility == "public") {
.@{writeStructToOutput(struct_obj)}
.
    }
.typedef struct @{struct_name} @{struct_name};
.

    if (struct_obj.visibility == "private") {
// Write struct definition to .c file
./!append(class_file)
.@{writeStructToOutput(struct_obj)}
    }
})

Object.entries(func).forEach(([func_name, func_obj]) => {
    var header_file = "src/" + func_obj.module + ".h"
    var class_file = "src/" + func_obj.module + ".c"
    if (func_obj.visibility == "public") {
// Write declaration to header file
./!append(header_file)
.
.@{writeFunctionToOutput(func_obj, true)}
    }

// Write definition to .c file
./!append(class_file)
.
    if (func_obj.visibility == "private") {
.static
    }
.@{writeFunctionToOutput(func_obj, false)}
})

Object.entries(main).forEach(([func_name, entry_point_obj]) => {
    var class_file = "src/" + entry_point_obj.module + ".c"
./!append(class_file)
.
.int main() {
.    @{func_name}();
.}
.
})


/**
 * Generate the Makefile
 * TODO: Create src and build directories if they don't exist
 */
./!output("Makefile")

./!tabsize(4)

var compileCommand = "gcc -g -Werror"

// Create target to make all executables
.all:
Object.entries(modules).forEach(([module_name, props]) => {
    if (props.executable) {
./+ @{module_name}
    }
})


// Recursively find all dependencies for an executable
findAllDependencies = function(project_deps) {
  var all_deps = []
  var frontier = project_deps
  
  while (frontier.length != 0) {
    var next = frontier.pop()
    all_deps.push(next)

    modules[next].project_deps.forEach((dep) => {
      if (!all_deps.includes(dep) && !project_deps.includes(dep)) {
        frontier.push(dep)
      }
    })
  }
  return all_deps
}

Object.entries(modules).forEach(([module_name, props]) => {
.
    if (props.executable) {
.@{module_name}: 
      var all_deps = findAllDependencies(props.project_deps)
        all_deps.forEach(function(dep) {
./+ @{dep}.o
        });
.    @{compileCommand} -o build/@{module_name} src/@{module_name}.c
        all_deps.forEach(function(dep) {
./+ build/@{dep}.o
        });
    } else {
.@{module_name}.o:
        props.project_deps.forEach(function(dep) {
./+ @{dep}.o
        });
.    @{compileCommand} -c -o build/@{module_name}.o src/@{module_name}.c
    }
})
.
.clean:
.    rm -r build/*
.    rm src/*.h
.    rm src/*.c
.
// Create test target
.test:
Object.entries(modules).forEach(([module_name, props]) => {
    if (props.executable) {
./+ @{module_name}
    }
})

// Run all executable modules
// TODO: Allow specification of which target a module should be in, or have one
// target per executable module, or both
Object.entries(modules).forEach(([module_name, props]) => {
    if (props.executable) {
.    ./build/@{module_name}
    }
})
.
.
// End header guard definition
Object.entries(modules).forEach(([module_name, deps]) => {
    var header_file = "src/" + module_name + ".h"
./!append(header_file)
.
.#endif // @{makeHeaderGuard(module_name)}
})


