
./!include("cgen_util.js.dna")

var t = {} // Type
var mt = {} // Type
var struct = {}
var func = {}
var constant = {}
var module = {}
var dep = {}
var modules = {}
var main = {}

defineModule = function(module_name, props) {
    assert(!modules.hasOwnProperty(module_name), "Cannot redefine module " +
        module_name)
    modules[module_name] = props
}

defineType = function(type_name, props) {
    assert(!t.hasOwnProperty(type_name), "Cannot redefine type " +
        type_name)
    t[type_name] = props
}

defineMetatype = function(type_name, props) {
    assert(!t.hasOwnProperty(type_name), "Cannot redefine metatype " +
        type_name)
    mt[type_name] = props
}

defineFunction = function(func_name, props) {
    assert(!func.hasOwnProperty(func_name), "Cannot redefine function " +
        func_name)
    func[func_name] = props
}

defineStruct = function(struct_name, props) {
    assert(!struct.hasOwnProperty(struct_name), "Cannot redefine struct " +
        struct_name)
    struct[struct_name] = props
}

defineEntryPoint = function(func_name, props) {
    defineFunction(func_name, props)
    assert(!main.hasOwnProperty(props.module), "Cannot redefine entry point for module " +
        props.module)
    main[func_name] = props
}

// TODO
./!include("cgen_class.js.dna")
./!include("package.js.dna")

var writeStructToOutput = function(struct_name, props) {
.struct 
.@{struct_name} { 
    Object.entries(props).forEach(([field_name, field_type]) => {
        assert(field_type, "Invalid type for field '" + field_name + "' in struct " + struct_name)
.    @{field_type} @{field_name};
    })
.};
.
}

var writeFunctionToOutput = function(func_name, func_def, is_header) {
    params = []
    Object.entries(func_def.inp).forEach(([arg_name, arg_type]) => {
        params.push(arg_type + " " + arg_name)
    })
    func_sig = func_name + "(" + params.join(", ") + ")"

    var ret_type = func_def.out
.@{ret_type}
.@{func_sig}
if (is_header) {
./+;
} else {
./+ {
.    @{func_def.def()};
.}
}
}

Object.entries(modules).forEach(([module_name, props]) => {
    header_file = "src/" + module_name + ".h"
./!output(header_file)
    header_guard = module_name.toUpperCase() + "_H"
.#ifndef @{header_guard}
.#define @{header_guard}
.
    props.project_deps.forEach(function(other_module) {
.#include "@{other_module}.h"
    })

    class_file = "src/" + module_name + ".c"
./!output(class_file)
.
.#include "@{module_name}.h"
.
    props.external_deps.forEach(function(other_module) {
.#include "@{other_module}.h"
    })
.
})

Object.entries(struct).forEach(([struct_name, props]) => {
    header_file = "src/" + props.module + ".h"
    class_file = "src/" + props.module + ".c"
./!append(header_file)
.
.typedef struct @{struct_name} @{struct_name};
.

./!append(class_file)
.@{writeStructToOutput(struct_name, props.data)}
})

Object.entries(func).forEach(([func_name, props]) => {
    header_file = "src/" + props.module + ".h"
    class_file = "src/" + props.module + ".c"
    assert(props.hasOwnProperty("inp"), 
           "Function " + func_name + " is missing input parameter list")
    assert(props.hasOwnProperty("out"), 
           "Function " + func_name + " is missing output parameter list")
    assert(props.hasOwnProperty("def"), 
           "Function " + func_name + " is missing definition")
    func_def = props

./!append(header_file)
.
.@{writeFunctionToOutput(func_name, func_def, true)}

./!append(class_file)
.
.@{writeFunctionToOutput(func_name, func_def, false)}
})

Object.entries(main).forEach(([func_name, props]) => {
    class_file = "src/" + props.module + ".c"
./!append(class_file)
.
.int main() {
.    @{func_name}();
.}
.
})

./!output("Makefile")

./!tabsize(4)

Object.entries(modules).forEach(([module_name, props]) => {
.
    if (props.executable) {
.@{module_name}: 
        props.project_deps.forEach(function(dep) {
./+ @{dep}.o
    });
.    gcc -g -Werror -o build/@{module_name} src/@{module_name}.c
    props.project_deps.forEach(function(dep) {
./+ build/@{dep}.o
    });

    } else {
.@{module_name}.o:
        props.project_deps.forEach(function(dep) {
./+ @{dep}.o
        });
.    gcc -g -Werror -c -o build/@{module_name}.o src/@{module_name}.c
    }
})
.
.clean:
.    rm build/*
.    rm src/*.h
.    rm src/*.c
.
.test:
Object.entries(modules).forEach(([module_name, props]) => {
    if (props.executable) {
./+ @{module_name}
    }
})
Object.entries(modules).forEach(([module_name, props]) => {
    if (props.executable) {
.    ./build/@{module_name}
    }
})
.
.
Object.entries(modules).forEach(([module_name, deps]) => {
    header_file = "src/" + module_name + ".h"
./!append(header_file)
    header_guard = module_name.toUpperCase() + "_H"
.
.#endif // @{header_guard}

})


