mc = {}

defineMetaClass = function(mc_props) {
  mc[mc_props.name] = mc_props.template
  mt[mc_props.name] = mc_props.name_fn
  //console.log(mc_props.name)
  //console.log(mc_props.hasOwnProperty("name_fn"))//("Int"))
  //console.log(mc_props.name_fn("Int"))
}

defineClass = function(class_body) {
  var class_name = class_body.name
  var required_fields = ["name", "metadata", "struct", "constructor", "destructor", "api", "tests"]
  required_fields.forEach((field_name) => {
    assert(class_body.hasOwnProperty(field_name), 
      "Class " + class_name + " must contain a " + field_name + " field.");
  });

  console.log("1 " + class_name)
  defineType(class_name, class_name)

  var class_module = class_body.metadata
  // TODO: Figure this out
  class_module["executable"] = false

  defineModule(class_name, class_module)
  console.log("2 " + class_name)

  struct[class_name] = {
    module: class_name,
    data: class_body.struct
  }
  console.log("3 " + class_name)

  Object.entries(class_body.api).forEach(([func_name, func_props]) => {
    var full_func_name = class_name + "_" + func_name

    var func_args = { self: mt.Ptr(t[class_name]) }

    Object.entries(func_props.inp).forEach(([arg_name, arg_type]) => {
      func_args[arg_name] = arg_type
    })

    func_props.inp = func_args

    func[full_func_name] = func_props
    func[full_func_name].module = class_name
  })
  console.log("4 " + class_name)

  ctor = {}//class_body.constructor
  ctor.module = class_name
  ctor.inp = class_body.constructor.inp
  ctor.out = mt.Ptr(t[class_name])
  ctor.def = function() {
    console.log("5 " + class_name)
.   @{mt.Ptr(t[class_name])} self = malloc(sizeof(@{t[class_name]}));
.   assert(self);
.   @{class_body.constructor.def()}
.   return self;
  }

  dtor = {}//class_body.constructor
  dtor.module = class_name
  dtor.inp = { self_ptr: mt.Ptr(mt.Ptr(t[class_name])) }
  dtor.out = t.Nothing 
  dtor.def = function() {
.   @{mt.Ptr(t[class_name])} self = *self_ptr;
.   @{class_body.destructor()}
.   free(self);
.   *self_ptr = NULL;
  }

  defineFunction(class_name + "_Create", ctor)
  defineFunction(class_name + "_Destroy", dtor)

  defineModule(class_name + "Test", {
    executable: true,
    project_deps: [class_name].concat(class_body.metadata.project_deps),
    external_deps: class_body.metadata.external_deps,
    external_libs: class_body.metadata.external_libs
  })

  defineEntryPoint(class_name + "Test" + "_Run", {
    module: class_name + "Test",
    inp: {},
    out: t.Nothing,
    def: () => {
.   printf("\nRunning all tests for class %s...\n\n", "@{class_name}");
      Object.entries(class_body.tests).forEach(([test_desc, test_body]) => {
.
.   printf("Running test: %s\n", "@{test_desc}");
.
.{
. @{test_body()}
.}
.
      })
.   printf("\nAll tests passed!\n");
    }
  })

}
