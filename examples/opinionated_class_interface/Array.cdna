
// Wouldn't be necessary if we included it in package.js.dna, but this is just an
// example of how to include other files
./!include("util.js.dna")

// Remember those metatype things we used to define the Ptr metatype? They're
// just functions that return strings, so there's no problem also using that
// function to, say, define an entirely new class! This way we can create new
// classes from a template simply by using the metatype anywhere. 
defineMetatype({
  name: "Array", 
  /**
   *  T is the type of the element we're storing, or the name of the
   *  class if we're storing objects as elements. 
   * 
   *  elements_are_objects is a boolean flag indicating whether we're storing
   *  objects of a class. More on that below.
   */
  def: function(T, elements_are_objects = false) { 
    // The name of the class that will be generated from this template
    var ElementArray = capitalize(T) + "Array"
    // We're doing some funny stuff here so I'll explain. I want to have this Array
    // work if I'm storing primitive types AND if I'm storing objects of a class.
    // So I have this boolean parameter elements_are_objects that the caller
    // of defineMetaclass can use to say if this array is storing objects or not.
    // If we're storing objects, longernally we'll store a pointer to the object
    // type, and inside Destroy we'll iterate through them and call
    // ElementType_Destroy on each of them to clean up the memory. Since our
    // objects are all refcounted, and we increment the refcount when we add an
    // element to the array, this should be fine! 
    if (elements_are_objects) {
      var ElementType = mt.Ptr(T)
      var ElementClass = T
      var project_deps = [ ElementClass ]
    } else {
      var ElementType = T
      var project_deps = []
    }

    defineType({
      name: ElementArray,
      ctype: ElementArray
    })

    defineClass({
      name: ElementArray,
      metadata: {
        project_deps: project_deps,
        external_deps: ["assert", "stdio", "stdlib"],
        external_libs: []
      },
      struct: { 
        // The size of the array
        size: t.Size,
        // The data in the array
        data: mt.Ptr(ElementType)
      },
      api: {
        Create: {
          inp: { size: t.Size, init_value: ElementType },
          def: () => {
.           self->size = size;
.           self->data = malloc(self->size * sizeof(@{ElementType}));
.           assert(self->data);
.           for (size_t i = 0; i < self->size; ++i) {
.             // While it would be silly to pass in a pointer to an existing
.             // object as the initial value, we'll pass it to the Set path
.             // to make sure the refcount is incremeneted enough times
.             @{ElementArray}_Set(self, i, init_value);
.           }
          }
        },
        Destroy: {
          def: () => {
            // If the elements are objects we want to destroy them all. For our
            // non-object arrays (like arrays of primitive types) this code won't
            // be generated!
            if (elements_are_objects) {
.             for (long i = 0; i < self->size; ++i) {
.               // We can do this because our class abstraction enforces
.               // the same destructor API across all objects.
.               @{ElementClass}_Destroy(&(self->data[i]));
.             }
            }
.           free(self->data);
          }
        },
        GetSize: {
          inp: {},
          out: t.Size,
          def: () => {
.           return self->size;
          }
        },
        Get: {
          inp: { idx: t.Size },
          out: ElementType, 
          def: () => {
.           assert(idx < self->size);
.           return self->data[idx];
          }
        },
        Set: {
          inp: { idx: t.Size, val: ElementType },
          out: t.Nothing, 
          def: () => {
.           assert(idx < self->size);
            if (elements_are_objects) {
.             if (val) {
.               @{ElementClass}_IncRefCount(val);
.             }
            }
.           self->data[idx] = val;
          }
        }
      },
      // We can't really define tests in the Array metaclass since we don't know 
      // necessarily how to e.g. initialize elements without knowing what their
      // type will be.
      tests: {}
    })
    return ElementArray
  }
})

defineType({
  name: "ArrayTest",
  ctype: "ArrayTest"
})

defineType({
  name: "Long",
  ctype: "long"
})

/**
 * Object to be used to test arrays of objects
 */
defineType({name: "TestObj", ctype: "TestObj"})

defineClass({
  name: "TestObj",
  metadata: {
    project_deps: [],
    external_deps: ["assert", "stdio", "stdlib"],
    external_libs: []
  },
  struct: { 
    // A pointer to an long we'll use to see if we correctly
    // destructed
    my_long: mt.Ptr(t.Long)
  },
  api: {
    Create: {
      inp: { my_long: mt.Ptr(t.Long) },
      def: () => {
.       assert(self);
.       self->my_long = my_long;
      }
    },
    Destroy: {
      def: () => {
.       // Zero out element so we can tell from the outside that
.       // the object was destructed
.       *(self->my_long) = 0;
      }
    }
  }, 
  tests: { /* Nah */}
})

defineClass({
  name: "ArrayTest",
  metadata: {
    // Just by using mt.Array we're already generating files LongArray.h/c and
    // TestObjArray.h/c!
    project_deps: [ mt.Array(t.Long), mt.Array(TestObj) ],
    external_deps: ["assert", "stdio", "stdlib"],
    external_libs: []
  },
  struct: {},
  api: {},
  tests: {
    "LongArray_Create creates an array with the correct size": () => {
.     size_t size = 3;
.     long init_val = 0;
.     LongArray* arr = LongArray_Create(size, init_val);
.     assert(LongArray_GetSize(arr) == size);
.     LongArray_Destroy(&arr);
    },
    "LongArray_Create correctly initializes all values": () => {
.     size_t size = 3;
.     long init_val = 0;
.     LongArray* arr = LongArray_Create(size, init_val);
.     for (size_t i = 0; i < LongArray_GetSize(arr); ++i) {
.       assert(LongArray_Get(arr, i) == 0);
.     }
.     LongArray_Destroy(&arr);
    },
    "TestObjArray_Destroy calls destructor of TestObj": () => {
.     long size = 1;
.     TestObj* init_val = NULL;
.     TestObjArray* arr = TestObjArray_Create(size, init_val);
.
.     long test_long = 42;
.     TestObj* test_obj = TestObj_Create(&test_long);
.
.     TestObjArray_Set(arr, 0, test_obj);
.     // Since we're refcounting, we need to destroy this first
.     TestObj_Destroy(&test_obj);
.     TestObjArray_Destroy(&arr);
.     // If we correctly destroyed the TestObj in the destructor, 
.     // this long should be set to 0
.     assert(test_long == 0);
    }, 
    "TestObjArray_Set increments refcount": () => {
.     long size = 1;
.     TestObj* init_val = NULL;
.     TestObjArray* arr = TestObjArray_Create(size, init_val);
.
.     long test_long = 42;
.     TestObj* test_obj = TestObj_Create(&test_long);
.
.     TestObjArray_Set(arr, 0, test_obj);
.     TestObjArray_Destroy(&arr);
.     // Refcount should be non-zero so this shouldn't have been affected
.     assert(test_long == 42);
.
.     TestObj_Destroy(&test_obj);
    }
  }
})
